Esse doc tem como objetivo ensinar a utilizar o sistema de livraria do papi kkk

1 - Voce deve rodar o Main.py
    o que tem no main.py?

No doc main.py é o layout principal e menu do sistema back end da livraria
onde ele te da as opções de uso por seleção de numeros

como por exemplo o numero 1:
    serve para cadastrar um novo livro no banco (o banco de dados é um doc json).
    ele se baseia em um input armazenado na var "op".
    e um if para seguir os passos a partir do numero selecionado.

    como ele funciona:
        ao escolher o "op" 1 ele verifica que "op" é exatamente igual a 1 (==).
        e com isso ele executa a function Base.AddLivros()

        AddLivros seta as variaveis (titulo, code, edit, area "presumo que seja categoria", ano, valor, estoque)
        todas com um input para pegar do usuario as informações a serem salvas no json

        logo apos ele seta a var livros que contem a function CarregaLivros()

        CarregaLivros() é uma função que contem dentro de Base.py
        Base.py tem os imports de json, os e Classes 
        CarregaLivros contem um if not os.pat.exists(DB_FILE):
                                        return {} (que retorna um dict caso o arquivo nao exista)
                                (if not é igual a if x == false) 
        logo apos um with open para trabalhar com arquivos e nesse caso eu sigo usando os
            e seto data=json.load(file)

        e as informações do livro em  Classes.py que tive que criar a classe Livros e dps tranfosrmar ela em dict com to_dict e from_dict
        e depois disso a function SaveLivros para salvar as infos em json

        mais uma vez com um with open e os e nesse with ja usando titulo: livro.to_dict() pra tranfosrmar em dict(dicionario)        
        essa função eu só aprendi da forma pratica e nao sei o pq tem cada parametro mas sei que os parametros são esses kkkkkkkkk
        
        as outras funções como ListarLivros(), BuscaNome(), BuscaCat(), BuscaPrice() e BuscaEstoque() 
        estao dentro de Function.py

        ListarLivros():
        usa a function CarregaLivros() da base.py

        e depois um if not livros para quando nao tiver livros dentro da base
        depois um for livro in livros.values (que é a var que armazenei a base  com a function CarregaLivros())

        depois de pegar as infos dos livros eu formatei como solicitado no doc do trabalho

        print(f">>>>> Cod#{livro.code}")
        print(f"Título/Editora: {livro.titulo}/{livro.edit}")
        print(f"Categoria: {livro.area}")
        print(f"Ano: {livro.ano}")
        print(f"Valor: R$ {livro.valor:.2f}")
        print(f"Estoque: {livro.estoque} unidades")
        print(f"Valor total em estoque: R$ {livro.estoque * livro.valor:.2f}")
        print("-" * 30)

        ai eu cheguei em uma guerra kkkkkkkkk
        que sao as Buscas

        BuscaNome():
        seta var livros novamente pra pegar as infos do json (eu usei assim pq cada função separada armazena de certa forma temporariamente as infos para mostrar no front entao nao tem problema de ter o mesmo nome, mas entendo que na pratica e pra futuras manutenções pode me dificultar porem sempre mostra no log qual a def que ta dando problema)
        seta var nome_busca com input pra pegar o dado do usuario
        depois eu descobri um negocio incrivel

        que seria uma forma dinamica de usar uma lista 

        que seria 

        encontrados = []

        onde ai dentro eu coloco
        [livro for livro in livros.values] 
        sabendo que livros esta em formato de dict
        o for percorre todos os values do dict
        e um if com a var nome_busca in livro.titulo
        e usa .lower() pra ficar tudo minusculo

        dps um if com for livro in encontrados para achar o livro e printar
        e um else nesse if pro caso de nao ter livro com esse nome

	porque nesse caso ele cria uma nova lista somente com o indicado no input do usuario

        BuscaCat é basicamente a mesma coisa so que com a var catega pra 
        pegar o dado do usuario

        BuscaPrice é a mesma coisa só que com um <= maxp pra preço maximo e depois encontra o livro e printa
        usando float na var maxp

        
